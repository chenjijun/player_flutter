import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../services/mode_service.dart';
import '../services/navidrome_service.dart';
import '../services/audio_handler.dart';
import '../models/song.dart';
import 'navidrome_playlist_detail.dart';

// 网易云音乐风格主题颜色
class NeteaseMusicTheme {
  static const Color primaryRed = Color(0xFFD33A31); // 网易云主红色
  static const Color darkBackground = Color(0xFF222222); // 深色背景
  static const Color lightBackground = Color(0xFFF5F5F5); // 浅色背景
  static const Color darkCard = Color(0xFF333333); // 深色卡片
  static const Color lightText = Color(0xFF333333); // 浅色文字
  static const Color darkText = Color(0xFFCCCCCC); // 深色文字
  static const Color secondaryText = Color(0xFF999999); // 次要文字颜色
}

class NavidromeLibraryPage extends StatefulWidget {
  const NavidromeLibraryPage({super.key});

  @override
  State<NavidromeLibraryPage> createState() => _NavidromeLibraryPageState();
}

class _NavidromeLibraryPageState extends State<NavidromeLibraryPage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Navidrome 音乐库'),
          backgroundColor: NeteaseMusicTheme.primaryRed,
          foregroundColor: Colors.white,
          bottom: const TabBar(
            tabs: [
              Tab(text: '歌曲'),
              Tab(text: '专辑'),
              Tab(text: '歌单'),
            ],
          ),
        ),
        body: const TabBarView(
          children: [
            SongListTab(),
            AlbumListTab(),
            PlaylistListTab(),
          ],
        ),
      ),
    );
  }
}

class SongListTab extends StatefulWidget {
  const SongListTab({super.key});

  @override
  State<SongListTab> createState() => _SongListTabState();
}

class _SongListTabState extends State<SongListTab> {
  late Future<List<Song>> _songsFuture;
  final int _pageSize = 20;
  int _currentPage = 0;
  bool _isLoading = false;
  int _totalSongs = 0;

  @override
  void initState() {
    super.initState();
    _loadInitialData();
  }

  void _loadInitialData() async {
    final modeService = Provider.of<ModeService>(context, listen: false);
    if (modeService.navidromeService.isConfigured) {
      _totalSongs = await modeService.navidromeService.getSongCount();
      _loadSongs();
    }
  }

  void _loadSongs() {
    setState(() {
      _isLoading = true;
    });

    final modeService = Provider.of<ModeService>(context, listen: false);
    _songsFuture = modeService.navidromeService.getSongs(
      offset: _currentPage * _pageSize,
      count: _pageSize,
    ).whenComplete(() {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    });
  }

  void _nextPage() {
    setState(() {
      _currentPage++;
      _loadSongs();
    });
  }

  void _prevPage() {
    if (_currentPage > 0) {
      setState(() {
        _currentPage--;
        _loadSongs();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final modeService = Provider.of<ModeService>(context);
    final audioService = Provider.of<AudioHandlerService>(context);
    
    if (!modeService.navidromeService.isConfigured) {
      return const Center(
        child: Text('请先配置Navidrome服务器'),
      );
    }

    final totalPages = (_totalSongs / _pageSize).ceil();

    return Column(
      children: [
        Expanded(
          child: FutureBuilder<List<Song>>(
            future: _songsFuture,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting && !_isLoading) {
                return const Center(child: CircularProgressIndicator());
              }
              if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              }
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(child: Text('没有歌曲'));
              }

              final songs = snapshot.data!;
              return Column(
                children: [
                  Expanded(
                    child: ListView.builder(
                      itemCount: songs.length,
                      itemBuilder: (context, index) {
                        final song = songs[index];
                        return ListTile(
                          leading: song.coverUrl != null
                              ? ClipRRect(
                                  borderRadius: BorderRadius.circular(4),
                                  child: CachedNetworkImage(
                                    imageUrl: song.coverUrl!,
                                    width: 40,
                                    height: 40,
                                    fit: BoxFit.cover,
                                    placeholder: (context, url) => Container(
                                      color: Colors.grey[300],
                                      width: 40,
                                      height: 40,
                                    ),
                                    errorWidget: (context, url, error) => Container(
                                      color: Colors.grey[300],
                                      child: const Icon(Icons.music_note, size: 20),
                                    ),
                                  ),
                                )
                              : Container(
                                  width: 40,
                                  height: 40,
                                  color: Colors.grey[300],
                                  child: const Icon(Icons.music_note, size: 20),
                                ),
                          title: Text(song.title),
                          subtitle: Text('${song.artist} - ${song.album}'),
                          trailing: Text(
                            Duration(seconds: song.duration).toString().split('.').first,
                          ),
                          onTap: () async {
                            await audioService.playSong(song);
                            if (context.mounted) {
                              Navigator.pushNamed(context, '/player');
                            }
                          },
                        );
                      },
                    ),
                  ),
                  // 分页控件
                  if (totalPages > 1)
                    Padding(
                      padding: const EdgeInsets.all(16),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          ElevatedButton(
                            onPressed: _currentPage > 0 ? _prevPage : null,
                            child: const Text('上一页'),
                          ),
                          Text('第 ${_currentPage + 1} 页，共 $totalPages 页'),
                          ElevatedButton(
                            onPressed: _currentPage < totalPages - 1 ? _nextPage : null,
                            child: const Text('下一页'),
                          ),
                        ],
                      ),
                    ),
                ],
              );
            },
          ),
        ),
      ],
    );
  }
}

class AlbumListTab extends StatefulWidget {
  const AlbumListTab({super.key});

  @override
  State<AlbumListTab> createState() => _AlbumListTabState();
}

class _AlbumListTabState extends State<AlbumListTab> {
  late Future<List<Map<String, dynamic>>> _albumsFuture;

  @override
  void initState() {
    super.initState();
    _loadAlbums();
  }

  void _loadAlbums() {
    final modeService = Provider.of<ModeService>(context, listen: false);
    if (modeService.navidromeService.isConfigured) {
      setState(() {
        _albumsFuture = modeService.navidromeService.getAlbumList('random', 50);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final modeService = Provider.of<ModeService>(context);
    final audioService = Provider.of<AudioHandlerService>(context);
    
    if (!modeService.navidromeService.isConfigured) {
      return const Center(
        child: Text('请先配置Navidrome服务器'),
      );
    }

    return FutureBuilder<List<Map<String, dynamic>>>(
      future: _albumsFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        }
        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const Center(child: Text('没有专辑'));
        }

        final albums = snapshot.data!;
        return GridView.builder(
          padding: const EdgeInsets.all(16),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            childAspectRatio: 0.8,
            crossAxisSpacing: 16,
            mainAxisSpacing: 16,
          ),
          itemCount: albums.length,
          itemBuilder: (context, index) {
            final album = albums[index];
            return GestureDetector(
              onTap: () async {
                await audioService.playAlbum(album['id']);
                if (context.mounted) {
                  Navigator.pushNamed(context, '/player');
                }
              },
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: album['coverArt'] != null
                          ? CachedNetworkImage(
                              imageUrl: album['coverArt'],
                              fit: BoxFit.cover,
                              placeholder: (context, url) => Container(
                                color: Colors.grey[300],
                              ),
                              errorWidget: (context, url, error) => Container(
                                color: Colors.grey[300],
                                child: const Icon(Icons.album, size: 40),
                              ),
                            )
                          : Container(
                              color: Colors.grey[300],
                              child: const Icon(Icons.album, size: 40),
                            ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    album['name'] ?? '未知专辑',
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    album['artist'] ?? '未知艺术家',
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(
                      color: Colors.grey,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }
}

class PlaylistListTab extends StatefulWidget {
  const PlaylistListTab({super.key});

  @override
  State<PlaylistListTab> createState() => _PlaylistListTabState();
}

class _PlaylistListTabState extends State<PlaylistListTab> {
  late Future<List<Map<String, dynamic>>> _playlistsFuture;

  @override
  void initState() {
    super.initState();
    _loadPlaylists();
  }

  void _loadPlaylists() {
    final modeService = Provider.of<ModeService>(context, listen: false);
    if (modeService.navidromeService.isConfigured) {
      setState(() {
        _playlistsFuture = modeService.navidromeService.getPlaylists();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final modeService = Provider.of<ModeService>(context);
    
    if (!modeService.navidromeService.isConfigured) {
      return const Center(
        child: Text('请先配置Navidrome服务器'),
      );
    }

    return FutureBuilder<List<Map<String, dynamic>>>(
      future: _playlistsFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        }
        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const Center(child: Text('没有歌单'));
        }

        final playlists = snapshot.data!;
        return ListView.builder(
          itemCount: playlists.length,
          itemBuilder: (context, index) {
            final playlist = playlists[index];
            return ListTile(
              leading: const Icon(Icons.queue_music, size: 40),
              title: Text(playlist['name'] ?? '未知歌单'),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('${playlist['songCount'] ?? 0} 首歌曲'),
                  Text(
                    '由 ${playlist['owner'] ?? '未知'} 创建',
                    style: const TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                ],
              ),
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => NavidromePlaylistDetailPage(
                      playlistId: playlist['id'],
                      playlistName: playlist['name'] ?? '未知歌单',
                      navidromeService: modeService.navidromeService,
                    ),
                  ),
                );
              },
            );
          },
        );
      },
    );
  }
}